@startuml TP

title "Drivehub"
scale 1.3

enum EstadoVehiculo {
   Disponible
   EnAlquiler
   EnMantenimiento
   NecesitaLimpieza
}

interface ITotalDelRecorrido{
   dia: Date,
   kmRecorrido: number
}

' Vehiculos
abstract class Vehiculo{
   -matricula: string
   -estado: EstadoVehiculo
   -contadorKm: number
   -tarifaBase: number
   -tarifaExtra: number

   + abstract calcularTarifa(totalDelRecorrido: ITotalDelRecorrido): number
   + actualizarContador(): void
   + setters_y_getters()
}

class Compacto{
   -tarifaBase: number
   -tarifaExtra: number
   + calcularTarifa(totalDelRecorrido: ITotalDelRecorrido): number
}

class Suv{
   -tarifaBase: number
   -tarifaExtra: number
   + calcularTarifa(totalDelRecorrido: ITotalDelRecorrido): number
}

class Sedan{
   -tarifaBase: number
   -tarifaExtra: number
   + calcularTarifa(totalDelRecorrido: ITotalDelRecorrido): number
}

Vehiculo <|-- Compacto
Vehiculo <|-- Sedan
Vehiculo <|-- Suv

' Clientes
class Cliente{
   -nombre: string
   -apellido: string
   -email: string
   
   + setters_y_getters()
}

class GestionDeClientes{
   - clientes: Cliente[]
   + agregarCliente(cliente: Cliente): void
   + eliminarCliente(cliente: Cliente): void
   - clienteExiste(cliente: Cliente): boolean
}

GestionDeClientes *-- Cliente

' Reservas
class Reserva{
   -cliente: Cliente
   -vehiculo: Vehiculo
   -informacionDelRecorrido: ManejarKilometraje
   
   + getters_y_setters()
   + calcularCostoTotal(totalDelRecorrido : ITotalDelRecorrido[]) : number
}

' //Crear la interface y aclarar que duelve el getTotalDelRecorrido
class ManejarKilometraje{
   - totalDelRecorrido: ITotalDelRecorrido[]
   + setKmRecorridoXDia(dia: Date, kmRecorrido: number): void
   + getTotalDelRecorrido() : ITotalDelRecorrido[]
}

class GestionDeReservas{
   -reservas: Reserva[]
   +agregarReserva(reserva: Reserva): void
   +cerrarReserva(reserva: Reserva): number
   -chequearDisponibilidad(): void
   - marcarVehiculoEnAlquiler(vehiculo: Vehiculo) : void
   - marcarVehiculoNecesitaLimpieza(vehiculo: Vehiculo) : void
   - actualizarKilometrajeRecorrido(vehiculo: Vehiculo, kmRecorridos: number): void
}

GestionDeReservas *-- Reserva
ManejarKilometraje o-- Reserva

Cliente -- Reserva
Vehiculo -- Reserva

' Vehiculos gestion
class GestionDeVehiculos{
   - vehiculos: Vehiculo[]
   + agregarVehiculo(vehiculo: Vehiculo): void
}

GestionDeVehiculos *-- Vehiculo

' Gestor principal
class GestorDeAlquilerVehicular{
   - gestionDeVehiculos: GestionDeVehiculos
   - gestionDeClientes: GestionDeClientes
   - gestionDeReservas: GestionDeReservas
}

GestorDeAlquilerVehicular o-- GestionDeVehiculos
GestorDeAlquilerVehicular o-- GestionDeReservas
GestorDeAlquilerVehicular o-- GestionDeClientes

' Mantenimiento
class MantenimientoVehiculo{
   -fechaMantenimiento: Date
   -costo: number
   -modelo: string
   + setters_y_getters()
}

class GestorDeMantenimiento{
   - vehiculosEnMantenimiento: MantenimientoVehiculo[]
   + registrarMantenimiento(vehiculo: MantenimientoVehiculo) : void
}

GestorDeMantenimiento o-- MantenimientoVehiculo
Vehiculo ..> EstadoVehiculo : usa
Vehiculo ..> ITotalDelRecorrido : usa
ManejarKilometraje ..> ITotalDelRecorrido : usa



' Dep
